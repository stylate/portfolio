import { S as SvelteComponentDev, i as init, s as safe_not_equal, u as empty, h as insert, e as element, t as text, c as claim_element, b as children, d as claim_text, f as detach, g as add_location, j as append, q as set_data, C as destroy_each, a as space, n as noop, l as listen, r as run_all } from './chunk.0b0fbf73.js';
import { m as mobileCheck } from './chunk.1c8adbe1.js';

/* src/components/Gallery.svelte generated by Svelte v3.4.4 */

const file = "src/components/Gallery.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.blurb = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.index = list[i];
	return child_ctx;
}

// (97:0) {:else}
function create_else_block(ctx) {
	var t, if_block1_anchor;

	var if_block0 = (!ctx.data.text) && create_if_block_3(ctx);

	function select_block_type_1(ctx) {
		if (ctx.data.text) return create_if_block_2;
		return create_else_block_1;
	}

	var current_block_type = select_block_type_1(ctx);
	var if_block1 = current_block_type(ctx);

	return {
		c: function create() {
			if (if_block0) if_block0.c();
			t = space();
			if_block1.c();
			if_block1_anchor = empty();
		},

		l: function claim(nodes) {
			if (if_block0) if_block0.l(nodes);
			t = claim_text(nodes, "\n    \n    ");
			if_block1.l(nodes);
			if_block1_anchor = empty();
		},

		m: function mount(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t, anchor);
			if_block1.m(target, anchor);
			insert(target, if_block1_anchor, anchor);
		},

		p: function update(changed, ctx) {
			if (!ctx.data.text) {
				if (if_block0) {
					if_block0.p(changed, ctx);
				} else {
					if_block0 = create_if_block_3(ctx);
					if_block0.c();
					if_block0.m(t.parentNode, t);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block1) {
				if_block1.p(changed, ctx);
			} else {
				if_block1.d(1);
				if_block1 = current_block_type(ctx);
				if (if_block1) {
					if_block1.c();
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			}
		},

		d: function destroy(detaching) {
			if (if_block0) if_block0.d(detaching);

			if (detaching) {
				detach(t);
			}

			if_block1.d(detaching);

			if (detaching) {
				detach(if_block1_anchor);
			}
		}
	};
}

// (93:0) {#if isMobile}
function create_if_block_1(ctx) {
	var each_1_anchor;

	var each_value_1 = ctx.data.number;

	var each_blocks = [];

	for (var i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	return {
		c: function create() {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},

		l: function claim(nodes) {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},

		m: function mount(target, anchor) {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
		},

		p: function update(changed, ctx) {
			if (changed.getImage || changed.data) {
				each_value_1 = ctx.data.number;

				for (var i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}
				each_blocks.length = each_value_1.length;
			}
		},

		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);

			if (detaching) {
				detach(each_1_anchor);
			}
		}
	};
}

// (98:4) {#if !data.text}
function create_if_block_3(ctx) {
	var h2, a0, t0, t1, a1, t2, t3, t4_value = ctx.idx + 1, t4, t5, t6_value = ctx.len + 1, t6, t7, dispose;

	return {
		c: function create() {
			h2 = element("h2");
			a0 = element("a");
			t0 = text("Previous");
			t1 = text(" / ");
			a1 = element("a");
			t2 = text("Next");
			t3 = text(" (");
			t4 = text(t4_value);
			t5 = text(" of ");
			t6 = text(t6_value);
			t7 = text(")");
			this.h();
		},

		l: function claim(nodes) {
			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			a0 = claim_element(h2_nodes, "A", { class: true }, false);
			var a0_nodes = children(a0);

			t0 = claim_text(a0_nodes, "Previous");
			a0_nodes.forEach(detach);
			t1 = claim_text(h2_nodes, " / ");

			a1 = claim_element(h2_nodes, "A", { class: true }, false);
			var a1_nodes = children(a1);

			t2 = claim_text(a1_nodes, "Next");
			a1_nodes.forEach(detach);
			t3 = claim_text(h2_nodes, " (");
			t4 = claim_text(h2_nodes, t4_value);
			t5 = claim_text(h2_nodes, " of ");
			t6 = claim_text(h2_nodes, t6_value);
			t7 = claim_text(h2_nodes, ")");
			h2_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			a0.className = "svelte-1o8q0il";
			add_location(a0, file, 98, 12, 1904);
			a1.className = "svelte-1o8q0il";
			add_location(a1, file, 98, 46, 1938);
			h2.className = "svelte-1o8q0il";
			add_location(h2, file, 98, 8, 1900);

			dispose = [
				listen(a0, "click", ctx.prev),
				listen(a1, "click", ctx.next)
			];
		},

		m: function mount(target, anchor) {
			insert(target, h2, anchor);
			append(h2, a0);
			append(a0, t0);
			append(h2, t1);
			append(h2, a1);
			append(a1, t2);
			append(h2, t3);
			append(h2, t4);
			append(h2, t5);
			append(h2, t6);
			append(h2, t7);
		},

		p: function update(changed, ctx) {
			if ((changed.idx) && t4_value !== (t4_value = ctx.idx + 1)) {
				set_data(t4, t4_value);
			}

			if ((changed.len) && t6_value !== (t6_value = ctx.len + 1)) {
				set_data(t6, t6_value);
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h2);
			}

			run_all(dispose);
		}
	};
}

// (104:4) {:else}
function create_else_block_1(ctx) {
	var img, img_src_value, dispose;

	return {
		c: function create() {
			img = element("img");
			this.h();
		},

		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { alt: true, src: true, class: true }, false);
			var img_nodes = children(img);

			img_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			img.alt = "";
			img.src = img_src_value = getImage(ctx.data.id, ctx.idx);
			img.className = "svelte-1o8q0il";
			add_location(img, file, 104, 8, 2118);
			dispose = listen(img, "click", ctx.next);
		},

		m: function mount(target, anchor) {
			insert(target, img, anchor);
		},

		p: function update(changed, ctx) {
			if ((changed.data || changed.idx) && img_src_value !== (img_src_value = getImage(ctx.data.id, ctx.idx))) {
				img.src = img_src_value;
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(img);
			}

			dispose();
		}
	};
}

// (102:4) {#if data.text}
function create_if_block_2(ctx) {
	var img, img_src_value, dispose;

	return {
		c: function create() {
			img = element("img");
			this.h();
		},

		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { alt: true, src: true, class: true }, false);
			var img_nodes = children(img);

			img_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			img.alt = "";
			img.src = img_src_value = getImage(ctx.data.id, ctx.idx);
			img.className = "svelte-1o8q0il";
			add_location(img, file, 102, 8, 2039);
			dispose = listen(img, "click", ctx.next);
		},

		m: function mount(target, anchor) {
			insert(target, img, anchor);
		},

		p: function update(changed, ctx) {
			if ((changed.data || changed.idx) && img_src_value !== (img_src_value = getImage(ctx.data.id, ctx.idx))) {
				img.src = img_src_value;
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(img);
			}

			dispose();
		}
	};
}

// (94:4) {#each data.number as index}
function create_each_block_1(ctx) {
	var img, img_src_value;

	return {
		c: function create() {
			img = element("img");
			this.h();
		},

		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { alt: true, src: true, class: true }, false);
			var img_nodes = children(img);

			img_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			img.alt = "";
			img.src = img_src_value = getImage(ctx.data.id, ctx.index);
			img.className = "svelte-1o8q0il";
			add_location(img, file, 94, 8, 1806);
		},

		m: function mount(target, anchor) {
			insert(target, img, anchor);
		},

		p: function update(changed, ctx) {
			if ((changed.data) && img_src_value !== (img_src_value = getImage(ctx.data.id, ctx.index))) {
				img.src = img_src_value;
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(img);
			}
		}
	};
}

// (109:0) {#if data.text}
function create_if_block(ctx) {
	var each_1_anchor;

	var each_value = ctx.data.text;

	var each_blocks = [];

	for (var i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c: function create() {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},

		l: function claim(nodes) {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},

		m: function mount(target, anchor) {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
		},

		p: function update(changed, ctx) {
			if (changed.data) {
				each_value = ctx.data.text;

				for (var i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}
				each_blocks.length = each_value.length;
			}
		},

		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);

			if (detaching) {
				detach(each_1_anchor);
			}
		}
	};
}

// (110:4) {#each data.text as blurb}
function create_each_block(ctx) {
	var p, t_value = ctx.blurb, t;

	return {
		c: function create() {
			p = element("p");
			t = text(t_value);
			this.h();
		},

		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true }, false);
			var p_nodes = children(p);

			t = claim_text(p_nodes, t_value);
			p_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			p.className = "svelte-1o8q0il";
			add_location(p, file, 110, 8, 2249);
		},

		m: function mount(target, anchor) {
			insert(target, p, anchor);
			append(p, t);
		},

		p: function update(changed, ctx) {
			if ((changed.data) && t_value !== (t_value = ctx.blurb)) {
				set_data(t, t_value);
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(p);
			}
		}
	};
}

function create_fragment(ctx) {
	var t, if_block1_anchor;

	function select_block_type(ctx) {
		if (ctx.isMobile) return create_if_block_1;
		return create_else_block;
	}

	var current_block_type = select_block_type(ctx);
	var if_block0 = current_block_type(ctx);

	var if_block1 = (ctx.data.text) && create_if_block(ctx);

	return {
		c: function create() {
			if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
		},

		l: function claim(nodes) {
			if_block0.l(nodes);
			t = claim_text(nodes, "\n\n");
			if (if_block1) if_block1.l(nodes);
			if_block1_anchor = empty();
		},

		m: function mount(target, anchor) {
			if_block0.m(target, anchor);
			insert(target, t, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, if_block1_anchor, anchor);
		},

		p: function update(changed, ctx) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
				if_block0.p(changed, ctx);
			} else {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);
				if (if_block0) {
					if_block0.c();
					if_block0.m(t.parentNode, t);
				}
			}

			if (ctx.data.text) {
				if (if_block1) {
					if_block1.p(changed, ctx);
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},

		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if_block0.d(detaching);

			if (detaching) {
				detach(t);
			}

			if (if_block1) if_block1.d(detaching);

			if (detaching) {
				detach(if_block1_anchor);
			}
		}
	};
}

function getImage(folder, index) {
      return "https://alans-photos.s3-us-west-1.amazonaws.com/" + folder + "/" + index.toString() + ".jpg";
  }

function instance($$self, $$props, $$invalidate) {
	let { data = {
        id: "",
        number: null,
        text: null
    } } = $$props;

    let idx, len;
    if (data.number) {
        $$invalidate('idx', idx = 0);
        $$invalidate('len', len = data.number.length - 1);
    }

    function prev() {
        if (idx > 0) { idx--; $$invalidate('idx', idx); }
        else $$invalidate('idx', idx = len);
    }

    function next() {
        if (idx < len) { idx++; $$invalidate('idx', idx); }
        else $$invalidate('idx', idx = 0);
    }

    let isMobile = mobileCheck();

	const writable_props = ['data'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<Gallery> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ('data' in $$props) $$invalidate('data', data = $$props.data);
	};

	return { data, idx, len, prev, next, isMobile };
}

class Gallery extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, ["data"]);
	}

	get data() {
		throw new Error("<Gallery>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set data(value) {
		throw new Error("<Gallery>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Gallery as G };
